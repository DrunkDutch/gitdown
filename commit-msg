#!/usr/bin/env ruby
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

#test "" = "$(grep '^Signed-off-by: ' "$1" |
#	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
#	echo >&2 Duplicate Signed-off-by lines.
#	exit 1
#}

require "serialport"
require 'io/console'

CONFIG = ".gitdown"

NORMAL_MODE = 1
KRUNK_MODE = 2
BALLMER_MODE = 3

NORMAL = 5
BALLMER = 14
KRUNK = 20

#Serial port init variables
port_str = "/dev/tty.usbmodem1421"  #set to Arduino USB port, can be checked in Arduino IDE
baud_rate = 9600
data_bits = 8
stop_bits = 1
parity = SerialPort::NONE
sp = SerialPort.new(port_str, baud_rate, data_bits, stop_bits, parity)
#Taking control of the serial port resets the Arduino.
#Wait 4 seconds for it to start up and autocalibrate
puts "Calibrating breathalyzer sensor..."
sleep(4) 

STDIN.iflush
print "Prepare to blow into the breathalyzer! Press ENTER when ready."
STDIN.gets #wait for enter key

puts "Blow blow blow!!!"

mode = ""
if File.exist?(CONFIG)
  File.open(CONFIG).each do |line|
    if line =~ /^mode.*/
      mode = line.split[1].to_i
    end
  end
else
  puts "No .gitdown file found"
end

# get bac from breathalizer
sp.write "a" #For the moment, the specific letter sent doesn't matter
sleep(6)     #breathalyzer takes 5 seconds to measure, plus 1 for good measure
bac = sp.gets.chomp.to_f / 100.0
puts "Your BAC is #{bac}%."

commit_file = ARGV[0]
message = File.read(commit_file).strip
puts message
puts mode

case mode
when NORMAL_MODE
  if bac > NORMAL
    puts "You are too drunk"
    exit 1
  else 
    puts "You are sober. Good job"
    exit 0
  end
when KRUNK_MODE
  if bac < KRUNK
    puts "You are not drunk enough"
    exit 1
  else
    puts "You are drunk! Good job"
    exit 0
  end
when BALLMER_MODE
  if bac == BALLMER
    puts "You are at the ballmer peak. Awesome!"
    exit 0
  else
    puts "You are not at your ballmer peak"
    exit 1
  end
else
  puts "Incorrect mode"
end
